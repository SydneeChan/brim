name: Brim CI

on:
  pull_request:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node-version: [12.x]
        os: [macos-10.15]
    steps:
      - run: git config --global core.autocrlf false
      - uses: actions/checkout@v2
      - name: setup node version ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - uses: actions/setup-go@v2
        with:
          go-version: "1.14"
      - uses: denolib/setup-deno@v2
        with:
          deno-version: v1.x
      - name: Set NPM Cache Directory
        id: set-npm-cache-dir
        run: echo "::set-output name=npm_cache_dir::$(npm config get cache)"
      - name: Clear Extraneous Runner Cache
        # Clear on-runner cache before we create our own cache to prevent
        # slower build times. See https://github.com/brimsec/brim/pull/590
        # and https://github.com/brimsec/brim/issues/641
        run: rm -rf "${NPM_CACHE:?}"
        env:
          NPM_CACHE: ${{ steps.set-npm-cache-dir.outputs.npm_cache_dir }}
        shell: bash
      - name: Cache node modules
        uses: actions/cache@v1
        # Change the cache name any time you want to start with a cleared
        # cache.
        env:
          cache-name: cache-node-modules-ci-v4
        with:
          path: ${{ steps.set-npm-cache-dir.outputs.npm_cache_dir }}
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.node-version }}-
      - run: npm install --no-audit
      - run: npm run format-check
      - run: npm run build
      - run: npm run lint
      - run: npm run tsc
      - run: npm test -- --maxWorkers=2 --ci
      - run: npm run test:api
      - name: Build Linux Packages
        if: runner.os == 'Linux'
        run: |
          set -x
          node scripts/release --linux
      - name: Persist Linux packages
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v1
        with:
          name: linux-release
          path: ./dist/installers

  mason_test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node-version: [12.x]
        os: [macos-10.15]
    needs: build
    steps:
      - run: git config --global core.autocrlf false
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: "1.14"
      - uses: denolib/setup-deno@v2
        with:
          deno-version: v1.x
      - name: setup node version ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Set NPM Cache Directory
        id: set-npm-cache-dir
        run: echo "::set-output name=npm_cache_dir::$(npm config get cache)"
      - name: Clear Extraneous Runner Cache
        run: rm -rf "${NPM_CACHE:?}"
        env:
          NPM_CACHE: ${{ steps.set-npm-cache-dir.outputs.npm_cache_dir }}
        shell: bash
      - name: Cache node modules
        uses: actions/cache@v1
        env:
          cache-name: cache-node-modules-ci-v4
        with:
          path: ${{ steps.set-npm-cache-dir.outputs.npm_cache_dir }}
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.node-version }}-
      - run: npm install --no-audit
      - run: npm run build
      - name: Run ngrok
        run: ./start_ngrok_tunnel.sh
        env:
          NGROK_TOKEN: ${{ secrets.NGROK_TOKEN }}
          SSH_PUBLIC_KEY: ${{ secrets.NGROK_SSH_PUBLIC_KEY }}
        shell: bash
      - name: Keep tunnel alive for 24 hours
        run: sleep 3600
        shell: bash

#      - name: Integration Tests (non-Linux)
#        if: runner.os != 'Linux'
#        run: npm run itest -- --ci --forceExit
#        env:
#          WORKSPACE: /var/tmp/brimsec
#      - uses: actions/upload-artifact@v1
#        if: failure()
#        with:
#          name: artifacts-${{ matrix.os }}-node-${{ matrix.node-version }}
#          path: /var/tmp/brimsec/itest
